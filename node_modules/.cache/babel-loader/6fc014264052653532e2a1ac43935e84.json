{"ast":null,"code":"/**\n * fitRows layout mode\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['../layout-mode'], factory);\n  } else if (typeof exports == 'object') {\n    // CommonJS\n    module.exports = factory(require('../layout-mode'));\n  } else {\n    // browser global\n    factory(window.Isotope.LayoutMode);\n  }\n})(window, function factory(LayoutMode) {\n  'use strict';\n\n  var FitRows = LayoutMode.create('fitRows');\n  var proto = FitRows.prototype;\n\n  proto._resetLayout = function () {\n    this.x = 0;\n    this.y = 0;\n    this.maxY = 0;\n\n    this._getMeasurement('gutter', 'outerWidth');\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    var itemWidth = item.size.outerWidth + this.gutter; // if this element cannot fit in the current row\n\n    var containerWidth = this.isotope.size.innerWidth + this.gutter;\n\n    if (this.x !== 0 && itemWidth + this.x > containerWidth) {\n      this.x = 0;\n      this.y = this.maxY;\n    }\n\n    var position = {\n      x: this.x,\n      y: this.y\n    };\n    this.maxY = Math.max(this.maxY, this.y + item.size.outerHeight);\n    this.x += itemWidth;\n    return position;\n  };\n\n  proto._getContainerSize = function () {\n    return {\n      height: this.maxY\n    };\n  };\n\n  return FitRows;\n});","map":{"version":3,"sources":["/Users/williamlab/Desktop/jocotepec/Saasland_React/node_modules/isotope-layout/js/layout-modes/fit-rows.js"],"names":["window","factory","define","amd","exports","module","require","Isotope","LayoutMode","FitRows","create","proto","prototype","_resetLayout","x","y","maxY","_getMeasurement","_getItemLayoutPosition","item","getSize","itemWidth","size","outerWidth","gutter","containerWidth","isotope","innerWidth","position","Math","max","outerHeight","_getContainerSize","height"],"mappings":"AAAA;;;AAIE,WAAUA,MAAV,EAAkBC,OAAlB,EAA4B;AAC5B;;AACA;;AAA2B;AAC3B,MAAK,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA3C,EAAiD;AAC/C;AACAD,IAAAA,MAAM,CAAE,CACJ,gBADI,CAAF,EAGJD,OAHI,CAAN;AAID,GAND,MAMO,IAAK,OAAOG,OAAP,IAAkB,QAAvB,EAAkC;AACvC;AACAC,IAAAA,MAAM,CAACD,OAAP,GAAiBH,OAAO,CACtBK,OAAO,CAAC,gBAAD,CADe,CAAxB;AAGD,GALM,MAKA;AACL;AACAL,IAAAA,OAAO,CACLD,MAAM,CAACO,OAAP,CAAeC,UADV,CAAP;AAGD;AAEF,CArBC,EAqBCR,MArBD,EAqBS,SAASC,OAAT,CAAkBO,UAAlB,EAA+B;AAC1C;;AAEA,MAAIC,OAAO,GAAGD,UAAU,CAACE,MAAX,CAAkB,SAAlB,CAAd;AAEA,MAAIC,KAAK,GAAGF,OAAO,CAACG,SAApB;;AAEAD,EAAAA,KAAK,CAACE,YAAN,GAAqB,YAAW;AAC9B,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,IAAL,GAAY,CAAZ;;AACA,SAAKC,eAAL,CAAsB,QAAtB,EAAgC,YAAhC;AACD,GALD;;AAOAN,EAAAA,KAAK,CAACO,sBAAN,GAA+B,UAAUC,IAAV,EAAiB;AAC9CA,IAAAA,IAAI,CAACC,OAAL;AAEA,QAAIC,SAAS,GAAGF,IAAI,CAACG,IAAL,CAAUC,UAAV,GAAuB,KAAKC,MAA5C,CAH8C,CAI9C;;AACA,QAAIC,cAAc,GAAG,KAAKC,OAAL,CAAaJ,IAAb,CAAkBK,UAAlB,GAA+B,KAAKH,MAAzD;;AACA,QAAK,KAAKV,CAAL,KAAW,CAAX,IAAgBO,SAAS,GAAG,KAAKP,CAAjB,GAAqBW,cAA1C,EAA2D;AACzD,WAAKX,CAAL,GAAS,CAAT;AACA,WAAKC,CAAL,GAAS,KAAKC,IAAd;AACD;;AAED,QAAIY,QAAQ,GAAG;AACbd,MAAAA,CAAC,EAAE,KAAKA,CADK;AAEbC,MAAAA,CAAC,EAAE,KAAKA;AAFK,KAAf;AAKA,SAAKC,IAAL,GAAYa,IAAI,CAACC,GAAL,CAAU,KAAKd,IAAf,EAAqB,KAAKD,CAAL,GAASI,IAAI,CAACG,IAAL,CAAUS,WAAxC,CAAZ;AACA,SAAKjB,CAAL,IAAUO,SAAV;AAEA,WAAOO,QAAP;AACD,GApBD;;AAsBAjB,EAAAA,KAAK,CAACqB,iBAAN,GAA0B,YAAW;AACnC,WAAO;AAAEC,MAAAA,MAAM,EAAE,KAAKjB;AAAf,KAAP;AACD,GAFD;;AAIA,SAAOP,OAAP;AAEC,CA/DC,CAAF","sourcesContent":["/**\n * fitRows layout mode\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        '../layout-mode'\n      ],\n      factory );\n  } else if ( typeof exports == 'object' ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode\n    );\n  }\n\n}( window, function factory( LayoutMode ) {\n'use strict';\n\nvar FitRows = LayoutMode.create('fitRows');\n\nvar proto = FitRows.prototype;\n\nproto._resetLayout = function() {\n  this.x = 0;\n  this.y = 0;\n  this.maxY = 0;\n  this._getMeasurement( 'gutter', 'outerWidth' );\n};\n\nproto._getItemLayoutPosition = function( item ) {\n  item.getSize();\n\n  var itemWidth = item.size.outerWidth + this.gutter;\n  // if this element cannot fit in the current row\n  var containerWidth = this.isotope.size.innerWidth + this.gutter;\n  if ( this.x !== 0 && itemWidth + this.x > containerWidth ) {\n    this.x = 0;\n    this.y = this.maxY;\n  }\n\n  var position = {\n    x: this.x,\n    y: this.y\n  };\n\n  this.maxY = Math.max( this.maxY, this.y + item.size.outerHeight );\n  this.x += itemWidth;\n\n  return position;\n};\n\nproto._getContainerSize = function() {\n  return { height: this.maxY };\n};\n\nreturn FitRows;\n\n}));\n"]},"metadata":{},"sourceType":"script"}