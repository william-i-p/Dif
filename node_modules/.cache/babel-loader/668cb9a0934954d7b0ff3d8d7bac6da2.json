{"ast":null,"code":"/*!\n * Masonry layout mode\n * sub-classes Masonry\n * https://masonry.desandro.com\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['../layout-mode', 'masonry-layout/masonry'], factory);\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('../layout-mode'), require('masonry-layout'));\n  } else {\n    // browser global\n    factory(window.Isotope.LayoutMode, window.Masonry);\n  }\n})(window, function factory(LayoutMode, Masonry) {\n  'use strict'; // -------------------------- masonryDefinition -------------------------- //\n  // create an Outlayer layout class\n\n  var MasonryMode = LayoutMode.create('masonry');\n  var proto = MasonryMode.prototype;\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  }; // inherit Masonry prototype\n\n  for (var method in Masonry.prototype) {\n    // do not inherit mode methods\n    if (!keepModeMethods[method]) {\n      proto[method] = Masonry.prototype[method];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n\n  proto.measureColumns = function () {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call(this);\n  }; // point to mode options for fitWidth\n\n\n  var _getOption = proto._getOption;\n\n  proto._getOption = function (option) {\n    if (option == 'fitWidth') {\n      return this.options.isFitWidth !== undefined ? this.options.isFitWidth : this.options.fitWidth;\n    }\n\n    return _getOption.apply(this.isotope, arguments);\n  };\n\n  return MasonryMode;\n});","map":{"version":3,"sources":["/Users/williamlab/Desktop/jocotepec/Saasland_React/node_modules/isotope-layout/js/layout-modes/masonry.js"],"names":["window","factory","define","amd","module","exports","require","Isotope","LayoutMode","Masonry","MasonryMode","create","proto","prototype","keepModeMethods","_getElementOffset","layout","_getMeasurement","method","measureColumns","items","isotope","filteredItems","call","_getOption","option","options","isFitWidth","undefined","fitWidth","apply","arguments"],"mappings":"AAAA;;;;;AAME,WAAUA,MAAV,EAAkBC,OAAlB,EAA4B;AAC5B;;AACA;;AAA2B;AAC3B,MAAK,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA3C,EAAiD;AAC/C;AACAD,IAAAA,MAAM,CAAE,CACJ,gBADI,EAEJ,wBAFI,CAAF,EAIJD,OAJI,CAAN;AAKD,GAPD,MAOO,IAAK,OAAOG,MAAP,IAAiB,QAAjB,IAA6BA,MAAM,CAACC,OAAzC,EAAmD;AACxD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CACtBK,OAAO,CAAC,gBAAD,CADe,EAEtBA,OAAO,CAAC,gBAAD,CAFe,CAAxB;AAID,GANM,MAMA;AACL;AACAL,IAAAA,OAAO,CACLD,MAAM,CAACO,OAAP,CAAeC,UADV,EAELR,MAAM,CAACS,OAFF,CAAP;AAID;AAEF,CAxBC,EAwBCT,MAxBD,EAwBS,SAASC,OAAT,CAAkBO,UAAlB,EAA8BC,OAA9B,EAAwC;AACnD,eADmD,CAGnD;AAEE;;AACA,MAAIC,WAAW,GAAGF,UAAU,CAACG,MAAX,CAAkB,SAAlB,CAAlB;AAEA,MAAIC,KAAK,GAAGF,WAAW,CAACG,SAAxB;AAEA,MAAIC,eAAe,GAAG;AACpBC,IAAAA,iBAAiB,EAAE,IADC;AAEpBC,IAAAA,MAAM,EAAE,IAFY;AAGpBC,IAAAA,eAAe,EAAE;AAHG,GAAtB,CAViD,CAgBjD;;AACA,OAAM,IAAIC,MAAV,IAAoBT,OAAO,CAACI,SAA5B,EAAwC;AACtC;AACA,QAAK,CAACC,eAAe,CAAEI,MAAF,CAArB,EAAkC;AAChCN,MAAAA,KAAK,CAAEM,MAAF,CAAL,GAAkBT,OAAO,CAACI,SAAR,CAAmBK,MAAnB,CAAlB;AACD;AACF;;AAED,MAAIC,cAAc,GAAGP,KAAK,CAACO,cAA3B;;AACAP,EAAAA,KAAK,CAACO,cAAN,GAAuB,YAAW;AAChC;AACA,SAAKC,KAAL,GAAa,KAAKC,OAAL,CAAaC,aAA1B;AACAH,IAAAA,cAAc,CAACI,IAAf,CAAqB,IAArB;AACD,GAJD,CAzBiD,CA+BjD;;;AACA,MAAIC,UAAU,GAAGZ,KAAK,CAACY,UAAvB;;AACAZ,EAAAA,KAAK,CAACY,UAAN,GAAmB,UAAUC,MAAV,EAAmB;AACpC,QAAKA,MAAM,IAAI,UAAf,EAA4B;AAC1B,aAAO,KAAKC,OAAL,CAAaC,UAAb,KAA4BC,SAA5B,GACL,KAAKF,OAAL,CAAaC,UADR,GACqB,KAAKD,OAAL,CAAaG,QADzC;AAED;;AACD,WAAOL,UAAU,CAACM,KAAX,CAAkB,KAAKT,OAAvB,EAAgCU,SAAhC,CAAP;AACD,GAND;;AAQA,SAAOrB,WAAP;AAED,CAnEC,CAAF","sourcesContent":["/*!\n * Masonry layout mode\n * sub-classes Masonry\n * https://masonry.desandro.com\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        '../layout-mode',\n        'masonry-layout/masonry'\n      ],\n      factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode'),\n      require('masonry-layout')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode,\n      window.Masonry\n    );\n  }\n\n}( window, function factory( LayoutMode, Masonry ) {\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var MasonryMode = LayoutMode.create('masonry');\n\n  var proto = MasonryMode.prototype;\n\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  };\n\n  // inherit Masonry prototype\n  for ( var method in Masonry.prototype ) {\n    // do not inherit mode methods\n    if ( !keepModeMethods[ method ] ) {\n      proto[ method ] = Masonry.prototype[ method ];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n  proto.measureColumns = function() {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call( this );\n  };\n\n  // point to mode options for fitWidth\n  var _getOption = proto._getOption;\n  proto._getOption = function( option ) {\n    if ( option == 'fitWidth' ) {\n      return this.options.isFitWidth !== undefined ?\n        this.options.isFitWidth : this.options.fitWidth;\n    }\n    return _getOption.apply( this.isotope, arguments );\n  };\n\n  return MasonryMode;\n\n}));\n"]},"metadata":{},"sourceType":"script"}